import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c,a,d as e,e as s,w as t,b as d}from"./app-46b4ffbb.js";const l={},p=d(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>There are only two hard things in Computer Science: cache invalidation and naming things. <strong>Phil Karlton</strong></p></div><p>One of the most difficult things while coding is naming things (variables, functions, and classes). Most people go ahead with single or double-letter variable names like A, v, d, mp, etc when they start coding. Most people use generic variable names like value, flag, map, arr, etc. These variable names might be easy to write but it makes the code difficult to read and makes debugging more time-consuming.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Be consistent in naming and use the same convention.</p></div><h2 id="how-to-create-meaningful-names" tabindex="-1"><a class="header-anchor" href="#how-to-create-meaningful-names" aria-hidden="true">#</a> How to Create Meaningful Names?</h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You should name a variable using the same care with which you name a first-born child. <strong>James O. Coplien</strong></p></div><p>Follow these rules to create meaningful variables, functions, and classes:</p><h3 id="use-intention-revealing-names" tabindex="-1"><a class="header-anchor" href="#use-intention-revealing-names" aria-hidden="true">#</a> Use Intention-Revealing Names</h3><p>The name of the variable, function, class, etc should be sufficient enough to understand its purpose. One should not have to read the whole code to figure out what a function does or what a class represents or to understand why a variable exists. The name should ideally not require a comment.</p><h4 id="bad-practise" tabindex="-1"><a class="header-anchor" href="#bad-practise" aria-hidden="true">#</a> Bad Practise</h4><div class="hint-container danger"><p class="hint-container-title">Warning</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> d<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
flag<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token function">getAnswer</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="good-practise" tabindex="-1"><a class="header-anchor" href="#good-practise" aria-hidden="true">#</a> Good Practise</h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> courseDurationInDays<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
chapterNames<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
isCellVisited<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token function">getSum</span><span class="token punctuation">(</span>firstNum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> secondNum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="use-descriptive-names" tabindex="-1"><a class="header-anchor" href="#use-descriptive-names" aria-hidden="true">#</a> Use Descriptive Names</h3><p>Names should also be descriptive. A long, descriptive name is better than using a comment to describe it. A name should be descriptive enough to understand the intent of that variable/function/class. One should not have to read the whole code to figure out what a function does or what a class represents or to understand why a variable exists.</p><h4 id="bad-practise-1" tabindex="-1"><a class="header-anchor" href="#bad-practise-1" aria-hidden="true">#</a> Bad Practise</h4><div class="hint-container danger"><p class="hint-container-title">Warning</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> course<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> duration<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> days<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> courseDuration<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="good-practise-1" tabindex="-1"><a class="header-anchor" href="#good-practise-1" aria-hidden="true">#</a> Good Practise</h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> courseDurationInDays<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="use-pronounceable-names" tabindex="-1"><a class="header-anchor" href="#use-pronounceable-names" aria-hidden="true">#</a> Use Pronounceable Names</h3><p>Using pronounceable names makes the code easy to read and discuss. Doing so allows for discussing/explaining code in plain English.</p><h4 id="bad-practise-2" tabindex="-1"><a class="header-anchor" href="#bad-practise-2" aria-hidden="true">#</a> Bad Practise</h4><div class="hint-container danger"><p class="hint-container-title">Warning</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> modDateYYMMDD<span class="token operator">:</span> Date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h4 id="good-practise-2" tabindex="-1"><a class="header-anchor" href="#good-practise-2" aria-hidden="true">#</a> Good Practise</h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> modificationTimestamp<span class="token operator">:</span> Date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="use-verbs-per-concept" tabindex="-1"><a class="header-anchor" href="#use-verbs-per-concept" aria-hidden="true">#</a> Use Verbs per Concept</h3><p>Always use consistent verbs per concept. For example, If we need a CRUD function, we use <code>create</code>, <code>get</code>, or <code>update</code> with the name. If we need to get user info from the database, then the name of the function can be <code>userInfo</code>, <code>user</code>, or <code>fetchUser</code>, but this is not the convention. We should use <code>getUser</code>.</p><p>Additionally, using consistent verbs per concept can help to prevent naming conflicts and naming collisions. If different functions and classes use different verbs to describe the same concept, it can be difficult to determine which function or class should be used in a given situation.</p><h4 id="bad-practise-3" tabindex="-1"><a class="header-anchor" href="#bad-practise-3" aria-hidden="true">#</a> Bad Practise</h4><div class="hint-container danger"><p class="hint-container-title">Warning</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">editCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h4 id="good-practise-3" tabindex="-1"><a class="header-anchor" href="#good-practise-3" aria-hidden="true">#</a> Good Practise</h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="avoid-encodings" tabindex="-1"><a class="header-anchor" href="#avoid-encodings" aria-hidden="true">#</a> Avoid Encodings</h3><p>Avoid using any unnecessary prefixes or suffixes. A variable/function/class name should not be unnecessarily prefixed/suffixed with type information or any other redundant information.</p><h4 id="bad-practise-4" tabindex="-1"><a class="header-anchor" href="#bad-practise-4" aria-hidden="true">#</a> Bad Practise</h4><div class="hint-container danger"><p class="hint-container-title">Warning</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> locationString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h4 id="good-practise-4" tabindex="-1"><a class="header-anchor" href="#good-practise-4" aria-hidden="true">#</a> Good Practise</h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> location<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="avoid-noise-words" tabindex="-1"><a class="header-anchor" href="#avoid-noise-words" aria-hidden="true">#</a> Avoid Noise Words</h3><p>Noise words like <code>Data</code>, <code>Value</code>, <code>Info</code>, <code>Variable</code>, <code>Table</code>, <code>String</code>, <code>Object</code>, etc which are used as a suffix do not offer any meaningful distinction. Noise words are redundant and should be avoided.</p><h4 id="bad-practise-5" tabindex="-1"><a class="header-anchor" href="#bad-practise-5" aria-hidden="true">#</a> Bad Practise</h4><div class="hint-container danger"><p class="hint-container-title">Warning</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> statusValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ProductInfo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="good-practise-5" tabindex="-1"><a class="header-anchor" href="#good-practise-5" aria-hidden="true">#</a> Good Practise</h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> status<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="use-searchable-names" tabindex="-1"><a class="header-anchor" href="#use-searchable-names" aria-hidden="true">#</a> Use Searchable Names</h3><p>In big codebases, you would have to search for variable/function/class names to find them. Small names or constant values might make it difficult to search. Proper names that make it easy to search make the code cleaner and easier to maintain.</p><h3 id="avoid-ambiguous-and-short-names" tabindex="-1"><a class="header-anchor" href="#avoid-ambiguous-and-short-names" aria-hidden="true">#</a> Avoid Ambiguous and Short Names</h3><p>Smaller names should only be used in variables inside short functions (for temporary use) where it has no meaning/use outside the said function. However, it should be noted that the variable names can be small if the scope of the variable is very small given that it is sufficient to understand the intention. For example, <code>i</code> variable in <code>for</code> loop.</p><h2 id="how-to-choose-names-for-things" tabindex="-1"><a class="header-anchor" href="#how-to-choose-names-for-things" aria-hidden="true">#</a> How to Choose Names for Things?</h2><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3>`,50),u=a("p",null,[a("strong",null,"Wrong names"),e(": student, Inkjet_printer, Bookinghistory")],-1),h=a("p",null,[a("strong",null,"Correct names"),e(": Student, InkjetPrinter, BookingHistory")],-1),m=a("h3",{id:"method",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#method","aria-hidden":"true"},"#"),e(" Method")],-1),b=a("p",null,[a("strong",null,"Wrong names"),e(": myAge, expensesHistory")],-1),v=a("p",null,[a("strong",null,"Correct names"),e(": setMyAge, getExpensesHistory")],-1),g=a("h3",{id:"variable",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#variable","aria-hidden":"true"},"#"),e(" Variable")],-1),k=a("p",null,[a("strong",null,"Wrong names"),e(": Student, Inkjet_printer, Bookinghistory")],-1),f=a("p",null,[a("strong",null,"Correct names"),e(": student, inkjetPrinter, bookingHistory")],-1),y=a("h3",{id:"constant",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#constant","aria-hidden":"true"},"#"),e(" Constant")],-1),w=a("p",null,[a("strong",null,"Wrong names"),e(": myAge, expensesHistory")],-1),x=a("p",null,[a("strong",null,"Correct names"),e(": setMyAge, getExpensesHistory")],-1);function _(A,P){const n=o("RouterLink");return r(),c("div",null,[p,a("p",null,[e("A class name must be "),s(n,{to:"/glossary/case.html#pascal-case"},{default:t(()=>[e("pascal case")]),_:1}),e(". Classes should have nouns or noun phrases as names. A class name should not be a verb.")]),u,h,m,a("p",null,[e("A method or function name must be "),s(n,{to:"/glossary/case.html#camel-case"},{default:t(()=>[e("camel case")]),_:1}),e(". Function names should be verbs or verb phrases that explain what the function does. Getters (Accessors) and Setters (Mutators) should start with get/set.")]),b,v,g,a("p",null,[e("A variable name must be "),s(n,{to:"/glossary/case.html#camel-case"},{default:t(()=>[e("camel case")]),_:1}),e(".")]),k,f,y,a("p",null,[e("A constant name must be "),s(n,{to:"/glossary/case.html#screaming-snake-case"},{default:t(()=>[e("screaming snake case")]),_:1}),e(".")]),w,x])}const T=i(l,[["render",_],["__file","naming.html.vue"]]);export{T as default};
