import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as l,a as n,e,w as s,b as p,d as t}from"./app-46b4ffbb.js";const r={},d=p(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Nesting in code refers to the practice of placing one block of code inside another block of code. This can be used to structure and organize code in a logical and readable manner. For example, a function might contain a nested if statement.</p><div class="hint-container info"><p class="hint-container-title">Example of two-level nested function</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;x is positive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;x is not positive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Always make the function maximum three-level nested.</p></div><h2 id="why-avoid-nesting" tabindex="-1"><a class="header-anchor" href="#why-avoid-nesting" aria-hidden="true">#</a> Why avoid nesting?</h2><p>Nesting makes code more difficult to read and understand. When nesting multiple layers of code within each other, it becomes harder for other programmers (or even yourself) to follow the logic and flow of the program. This can lead to confusion and mistakes, and also increase the complexity of the program.</p><p>Each level of nesting adds an abstraction layer, making it more challenging to identify and resolve errors. This can lead to more time spent debugging and testing and can even cause your program to crash. Additionally, nesting your code can make it more challenging to maintain and update in the future.</p><h2 id="how-avoid-nesting-code" tabindex="-1"><a class="header-anchor" href="#how-avoid-nesting-code" aria-hidden="true">#</a> How avoid nesting code?</h2><p>Here are a few methods for de-nesting your code:</p>`,9);function u(h,m){const a=i("RouterLink");return c(),l("div",null,[d,n("ul",null,[n("li",null,[n("p",null,[e(a,{to:"/method/extraction.html"},{default:s(()=>[t("Extraction Method")]),_:1})])]),n("li",null,[n("p",null,[e(a,{to:"/method/inversion.html"},{default:s(()=>[t("Inversion Method")]),_:1})])])])])}const v=o(r,[["render",u],["__file","nesting.html.vue"]]);export{v as default};
