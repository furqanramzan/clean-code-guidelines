import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as o,b as n}from"./app-46b4ffbb.js";const a={},i=n('<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Functions are one of the most important parts of writing code. They make the code reusable and easy to read and maintain. Functions make the code organized.</p><p>One should be able to look at the function name and understand what that function does. If they want to know more, they should just be able to skim through the function to get detail which is at a lower level. For more lower-level details, they should look at the implementation of the functions called inside it.</p><p>A good function allows understanding it without going into lower-level details unless required.</p><h2 id="how-to-design-good-functions" tabindex="-1"><a class="header-anchor" href="#how-to-design-good-functions" aria-hidden="true">#</a> How to Design Good Functions</h2><p>A good function should have the following properties:</p><h3 id="should-be-small" tabindex="-1"><a class="header-anchor" href="#should-be-small" aria-hidden="true">#</a> Should be small</h3><h4 id="how-small" tabindex="-1"><a class="header-anchor" href="#how-small" aria-hidden="true">#</a> How small?</h4><p>Functions should be very small. It should be hardly 20 lines long.</p><h4 id="how-to-make-functions-smaller" tabindex="-1"><a class="header-anchor" href="#how-to-make-functions-smaller" aria-hidden="true">#</a> How to make functions smaller?</h4><p>Anything inside that function that can be made into a separate function should be extracted. The extracted function should be called from the previous function.</p><h4 id="single-line-code-blocks" tabindex="-1"><a class="header-anchor" href="#single-line-code-blocks" aria-hidden="true">#</a> Single-line code blocks</h4><p>Nested structures like if, else, while, for, try, etc should ideally call another function in their code block. This makes the code easier to read and understand.</p><h3 id="should-do-just-one-thing" tabindex="-1"><a class="header-anchor" href="#should-do-just-one-thing" aria-hidden="true">#</a> Should Do Just One Thing</h3><p>A function should do one thing and do it well. In general, all the things in a function should be at the same abstraction level. A function should not have both lower-level and higher-level details.</p><p>If another function can be extracted out of a function then it is doing more than one thing. We should extract functions to achieve the same level of abstraction,</p><p>Functions that can be divided into multiple sections do more than one thing.</p><h3 id="should-have-fewer-arguments" tabindex="-1"><a class="header-anchor" href="#should-have-fewer-arguments" aria-hidden="true">#</a> Should have Fewer Arguments</h3><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The ideal number of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic). Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification—and then shouldn’t be used anyway. <strong>Robert C. Martin (Uncle Bob)</strong></p></div><p>Arguments make the code harder to understand and test and so we should keep it as low as possible. In most cases, a set of related arguments used across functions deserves to be wrapped in a class of its own.</p><p>Flag arguments are boolean arguments that make the code do two things based on the flag value. It should be avoided as it breaks the rule of doing only one thing.</p><h3 id="should-not-have-side-effects" tabindex="-1"><a class="header-anchor" href="#should-not-have-side-effects" aria-hidden="true">#</a> Should Not Have Side Effects</h3><p>A function should not promise one thing and do something else as a side effect.</p><p>Example: Changing the parameters/class properties in a get/query method.</p><p>A set/update (command) function should not ideally update the parameters. They can however update the properties of the class the function belongs to.</p><h2 id="how-to-write-good-functions" tabindex="-1"><a class="header-anchor" href="#how-to-write-good-functions" aria-hidden="true">#</a> How To Write Good Functions?</h2><p>It is okay to start with long functions with multiple arguments which do more than one thing. Start refactoring larger functions into smaller functions till there is a single level of abstraction in the function and no more functions can be extracted. Make sure that the function names are descriptive and have fewer arguments. In the end, all the functions should follow the above rules.</p>',27),s=[i];function h(d,r){return t(),o("div",null,s)}const u=e(a,[["render",h],["__file","function.html.vue"]]);export{u as default};
