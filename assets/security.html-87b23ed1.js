import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as o,b as t}from"./app-46b4ffbb.js";const s={},r=t('<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>These are not something new. These are the industry best practices that many of you already know. But it&#39;s better to refresh this knowledge once in a while. So Without any further talking let&#39;s go to the point.</p><ul><li><p>Validation must be included both on the server and client side.</p></li><li><p>Hazardous characters should not be allowed (e.g. &lt;&gt; &quot; &#39; % ( ) &amp; + \\ &#39; &quot;*#;--).</p></li><li><p>All data going for SQL, XML, and LDAP* should be sanitized.</p></li><li><p>Passwords should be saved as a one-way salted hash (MD5 is easy to break).</p></li><li><p>Instead of showing &quot;Invalid username&quot; or &quot;Invalid password&quot; just use &quot;Invalid username and/or passwordâ€œ.</p></li><li><p>Changing temporary passwords &amp; Strong password policy should be enforced.</p></li><li><p>The account should be temporarily disabled after a specified number of invalid login attempts.</p></li><li><p>Temporary information (e.g. OTP) should have an expiration time.</p></li><li><p>Cross-Site Request Forgery (CSRF) should be prevented.</p></li><li><p>Authorization decisions should be made from the server side.</p></li><li><p>Access to files or other resources should be authorized.</p></li><li><p>Sensitive information like stack trace should not be disclosed in error responses.</p></li><li><p>Try to handle most of the errors on the client side and custom error pages should be constructed.</p></li><li><p>Logs should contain log event data like validation failures, authentication attempts, apparent tampering events, exceptions, and administrative function failures.</p></li><li><p>Sensitive information should not be logged and log access should be restricted.</p></li><li><p>Users should get only the required data that is needed to perform their tasks.</p></li><li><p>Cached or Temporary copies of sensitive data stored on the server should be protected.</p></li><li><p>Highly sensitive information should be encrypted.</p></li><li><p>Server-side source code should be protected from being downloaded by a user.</p></li><li><p>Unnecessary application and system documentation should be removed from the production server.</p></li><li><p>Sensitive information should not be in HTTP GET request parameters.</p></li><li><p>At minimum operations like Login, Registration, Access to personal data, Change of password &amp; Password reminder function should be encrypted.</p></li><li><p>Servers, frameworks and systems should be in the latest stable version with security patches.</p></li><li><p>Directory &amp; directory structure listings should be turned off from the server and unnecessary functionality, files test code or any functionality should not be in production.</p></li><li><p>Info related to OS, server &amp; app framework should be removed from HTTP response headers.</p></li><li><p>Isolate the development server from production.</p></li><li><p>Variables should be strongly verified before sending into database queries.</p></li><li><p>The database should be accessed using a secured user with the lowest privileged.</p></li><li><p>Default passwords should be changed.</p></li><li><p>Any accounts that are not required should be disabled in servers and databases.</p></li><li><p>User-supplied data should not be passed to the dynamic execution function. For example eval.</p></li><li><p>Execution privileges should be turned off on file upload directories.</p></li><li><p>Use Secure Upload (check file size, change file name, check extension).</p></li><li><p>Directory or file paths should not be passed, use index values mapped to a pre-defined list.</p></li><li><p>All input strings should be truncated to a reasonable length.</p></li><li><p>Allocated memory should be securely freed.</p></li><li><p>Calculation errors should be avoided by understanding how the language handles numbers.</p></li><li><p>Encrypted and Secured channels should be used to transfer the code from the host server.</p></li></ul>',3),l=[r];function a(n,d){return i(),o("div",null,l)}const h=e(s,[["render",a],["__file","security.html.vue"]]);export{h as default};
